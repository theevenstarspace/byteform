/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/explicit-member-accessibility */

// Generated using: https://flatbuffers.ar.je/

// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Bullet } from './bullet';
import { Vec3 } from './vec3';


export class Player {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Player {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsPlayer(bb:flatbuffers.ByteBuffer, obj?:Player):Player {
    return (obj || new Player()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsPlayer(bb:flatbuffers.ByteBuffer, obj?:Player):Player {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Player()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  name():string|null
  name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
  name(optionalEncoding?:any):string|Uint8Array|null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  position(obj?:Vec3):Vec3|null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  rotation():number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
  }

  bullets(index: number, obj?:Bullet):Bullet|null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? (obj || new Bullet()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
  }

  bulletsLength():number {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startPlayer(builder:flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
    builder.addFieldOffset(0, nameOffset, 0);
  }

  static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
    builder.addFieldStruct(1, positionOffset, 0);
  }

  static addRotation(builder:flatbuffers.Builder, rotation:number) {
    builder.addFieldFloat32(2, rotation, 0.0);
  }

  static addBullets(builder:flatbuffers.Builder, bulletsOffset:flatbuffers.Offset) {
    builder.addFieldOffset(3, bulletsOffset, 0);
  }

  static createBulletsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startBulletsVector(builder:flatbuffers.Builder, numElems:number) {
    builder.startVector(4, numElems, 4);
  }

  static endPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishPlayerBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
    builder.finish(offset);
  }

  static finishSizePrefixedPlayerBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
    builder.finish(offset, undefined, true);
  }

}
